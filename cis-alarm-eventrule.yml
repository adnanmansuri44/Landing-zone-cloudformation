Resources:
#===============================================================================================================================
# MetricFilter and CloudWatch Alarm Section
#===============================================================================================================================

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.1   Ensure a log metric filter and alarm exist for unauthorized API calls (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  UnauthorizedApiCallsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      AlarmName: CIS-Unauthorized Activity Attempt
      AlarmDescription: Alarm if Multiple unauthorized actions or logins attempted
      MetricName: UnauthorizedAttemptCount
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 60
      EvaluationPeriods: '1'
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  UnauthorizedApiCallsFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      LogGroupName: !GetAtt ResourceForGetCloudWatchLogName.LogName
      FilterPattern: |-
        {
          ($.errorCode = "*UnauthorizedOperation") ||
          ($.errorCode = "AccessDenied*")
        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: CloudTrailMetrics
        MetricName: UnauthorizedAttemptCount

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.2   Ensure a log metric filter and alarm exist for Management Console sign-in without MFA (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  NoMfaConsoleLoginsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    - UnauthorizedApiCallsAlarm
    Properties:
      AlarmName: CIS-Console Signin Without MFA
      AlarmDescription: Alarm if there is a Management Console sign-in without MFA
      MetricName: ConsoleSigninWithoutMFA
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  NoMfaConsoleLoginsFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      LogGroupName: !GetAtt ResourceForGetCloudWatchLogName.LogName
      FilterPattern: |-
        {
          ($.eventName = "ConsoleLogin") &&
          ($.additionalEventData.MFAUsed != "Yes") &&
          ($.responseElements.ConsoleLogin != "Failure") &&
          ($.additionalEventData.SamlProviderArn NOT EXISTS)
        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSigninWithoutMFA

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 1.1   Avoid the use of the "root" account (Scored)
# CIS AWS Foundations Benchmark - 3.3   Ensure a log metric filter and alarm exist for usage of "root" account  (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  RootAccountLoginsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    - NoMfaConsoleLoginsAlarm
    Properties:
      AlarmName: CIS-IAM Root Activity
      AlarmDescription: Alarm if a 'root' user uses the account
      MetricName: RootUserEventCount
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  RootAccountLoginsFilter:
    Type: AWS::Logs::MetricFilter
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      LogGroupName: !GetAtt ResourceForGetCloudWatchLogName.LogName
      FilterPattern: |-
        {
          ($.userIdentity.type = "Root") &&
          ($.userIdentity.invokedBy NOT EXISTS) &&
          ($.eventType != "AwsServiceEvent")
        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: CloudTrailMetrics
        MetricName: RootUserEventCount

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.4   Ensure a log metric filter and alarm exist for IAM policy changes (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  IamPolicyChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CIS-DetectIamPolicyChanges
      Description: Publishes formatted IAM policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - iam.amazonaws.com
          eventName:
          - CreateAccessKey
          - DeleteAccessKey
          - DeleteRolePolicy
          - DeleteUserPolicy
          - PutGroupPolicy
          - PutRolePolicy
          - PutUserPolicy
          - CreatePolicy
          - DeletePolicy
          - CreatePolicyVersion
          - DeletePolicyVersion
          - AttachRolePolicy
          - DetachRolePolicy
          - AttachUserPolicy
          - DetachUserPolicy
          - AttachGroupPolicy
          - DetachGroupPolicy
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.5   Ensure a log metric filter and alarm exist for CloudTrail configuration changes (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  CloudTrailCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CIS-DetectCloudTrailChanges
      Description: Publishes formatted CloudTrail change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - cloudtrail.amazonaws.com
          eventName:
          - StopLogging
          - DeleteTrail
          - UpdateTrail
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# --------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.6 Ensure a log metric filter and alarm exist for AWS Management Console authentication failures (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------
  FailedConsoleLoginsAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    - RootAccountLoginsAlarm
    Properties:
      AlarmName: CIS-Console Login Failures
      AlarmDescription: Alarm if there are AWS Management Console authentication failures
      MetricName: ConsoleLoginFailures
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: '300'
      EvaluationPeriods: '1'
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  FailedConsoleLoginsFilter:
    Type: AWS::Logs::MetricFilter
    Condition: IsLevel2
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      LogGroupName: !GetAtt ResourceForGetCloudWatchLogName.LogName
      FilterPattern: |-
        {
          ($.eventName = ConsoleLogin) &&
          ($.errorMessage = "Failed authentication")
        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleLoginFailures

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.7   Ensure a log metric filter and alarm exist for disabling or scheduled deletion of customer created CMKs (Scored)
# -------------------------------------------------------------------------------------------------------------------------------------------------------
  DisabledOrDeletedCmksAlarm:
    Type: AWS::CloudWatch::Alarm
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    - FailedConsoleLoginsAlarm
    Properties:
      AlarmName: CIS-KMS Key Disabled or Scheduled for Deletion
      AlarmDescription: Alarm if customer created CMKs get disabled or scheduled for
        deletion
      MetricName: KMSCustomerKeyDeletion
      Namespace: CloudTrailMetrics
      Statistic: Sum
      Period: 60
      EvaluationPeriods: 1
      Threshold: 1
      TreatMissingData: notBreaching
      AlarmActions:
      - !Ref AlarmNotificationTopic
      ComparisonOperator: GreaterThanOrEqualToThreshold
  DisabledOrDeletedCmksFilter:
    Type: AWS::Logs::MetricFilter
    Condition: IsLevel2
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      LogGroupName: !GetAtt ResourceForGetCloudWatchLogName.LogName
      FilterPattern: |-
        {
          ($.eventSource = kms.amazonaws.com) &&
          (($.eventName=DisableKey) || ($.eventName=ScheduleKeyDeletion))
        }
      MetricTransformations:
      - MetricValue: '1'
        MetricNamespace: CloudTrailMetrics
        MetricName: KMSCustomerKeyDeletion

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.8   Ensure a log metric filter and alarm exist for S3 bucket policy changes (Scored)
# -------------------------------------------------------------------------------------------------------------------------------------------------------
  DetectS3BucketPolicyChanges:
    Type: AWS::Events::Rule
    Properties:
      Name: CIS-DetectS3BucketPolicyChanges
      Description: Publishes formatted S3 bucket policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - s3.amazonaws.com
          eventName:
          - PutBucketAcl
          - PutBucketPolicy
          - PutBucketCors
          - PutBucketLifecycle
          - PutBucketReplication
          - DeleteBucketPolicy
          - DeleteBucketCors
          - DeleteBucketLifecycle
          - DeleteBucketReplication
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# -------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.9   Ensure a log metric filter and alarm exist for AWS Config configuration changes (Scored)
# -------------------------------------------------------------------------------------------------------------------------------------------------------
  DetectConfigChanges:
    Type: AWS::Events::Rule
    Condition: IsLevel2
    Properties:
      Name: CIS-DetectConfigChanges
      Description: Publishes formatted Config change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - config.amazonaws.com
          eventName:
          - PutConfigurationRecorder
          - StopConfigurationRecorder
          - DeleteDeliveryChannel
          - PutDeliveryChannel
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# ------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.10  Ensure a log metric filter and alarm exist for security group changes (Scored)
# ------------------------------------------------------------------------------------------------------------------------------------
  SecurityGroupChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Condition: IsLevel2
    Properties:
      Name: CIS-DetectSecurityGroupChanges
      Description: Publishes formatted security group change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AuthorizeSecurityGroupIngress
          - AuthorizeSecurityGroupEgress
          - RevokeSecurityGroupIngress
          - RevokeSecurityGroupEgress
          - CreateSecurityGroup
          - DeleteSecurityGroup
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.11  Ensure a log metric filter and alarm exist for changes to Network Access Control Lists (NACL) (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  NetworkAclChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Condition: IsLevel2
    Properties:
      Name: CIS-DetectNetworkAclChanges
      Description: Publishes formatted network ACL change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - CreateNetworkAcl
          - CreateNetworkAclEntry
          - DeleteNetworkAcl
          - DeleteNetworkAclEntry
          - ReplaceNetworkAclEntry
          - ReplaceNetworkAclAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - 3.12  Ensure a log metric filter and alarm exist for changes to network gateways (Scored)
# CIS AWS Foundations Benchmark - 3.13  Ensure a log metric filter and alarm exist for route table changes (Scored)
# CIS AWS Foundations Benchmark - 3.14  Ensure a log metric filter and alarm exist for VPC changes (Scored)
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  NetworkChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CIS-DetectNetworkChangeEvents
      Description: Publishes formatted network change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AcceptVpcPeeringConnection
          - AttachClassicLinkVpc
          - AttachInternetGateway
          - AssociateRouteTable
          - CreateCustomerGateway
          - CreateInternetGateway
          - CreateRoute
          - CreateRouteTable
          - CreateVpc
          - CreateVpcPeeringConnection
          - DeleteCustomerGateway
          - DeleteInternetGateway
          - DeleteRoute
          - DeleteRouteTable
          - DeleteDhcpOptions
          - DeleteVpc
          - DeleteVpcPeeringConnection
          - DetachClassicLinkVpc
          - DetachInternetGateway
          - DisableVpcClassicLink
          - DisassociateRouteTable
          - EnableVpcClassicLink
          - ModifyVpcAttribute
          - RejectVpcPeeringConnection
          - ReplaceRoute
          - ReplaceRouteTableAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1

# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - CloudWatch Event rule for Config Compliance changes
# All reporting of changes to compliance status to Config rules is handled by this CloudWatch Events rule which then publishes to SNS
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  ConfigRulesComplianceChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CIS-DetectConfigRulesComplianceChanges
      Description: Publishes formatted Config Rules Compliance Changes events to an SNS topic
      EventPattern:
        detail-type:
        - Config Rules Compliance Change
        source:
        - aws.config
        detail:
          configRuleName:
          - CIS-UsersMustHaveMfaEnabled
          - CIS-RotateUserPasswords
          - CIS-RotateAccessKeys
          - CIS-KmsCustomerKeysMustBeRotated
          - CIS-SecurityGroupsMustRestrictSshTraffic
          - CIS-VpcDefaultSecurityGroupsMustRestrictAllTraffic
          - CIS-SecurityGroupsMustDisallowTcpTraffic
          - CIS-IamPasswordPolicyMustMeetRequirements
          - CIS-CloudTrailMustBeActive
          - CIS-EvaluateVpcFlowLogs
          - CIS-RootAccountMustHaveMfaEnabled
          - CIS-EvaluateFullAdminPrivilegesPolicies
          - CIS-InstancesMustUseIamRoles
          - CIS-UsersMustNotHaveAssociatedPolicies
          - CIS-AwsSupportRoleExists
          - CIS-CloudTrailBucketMustBeSecure
          - CIS-VpcPeeringRouteTablesMustBeLeastAccess
          - CIS-CloudTrailLogsMustBeValidatedAndEncrypted
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
# --------------------------------------------------------------------------------------------------------------------------------------------------------
# CIS AWS Foundations Benchmark - Alarm Notification Topic - NotificationEmailAddressForCloudWatchAlarms
# Any reporting / alerts to end user should be via an SNS Topic – the subscriber is the provided email address
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    DependsOn:
    - ResourceForEvaluateCISBenchmarkPreconditions
    - ResourceForGetCloudWatchLogName
    Properties:
      TopicName: CIS-NotificationTopic
      Subscription:
      - Endpoint: !Ref NotificationEmailAddressForCloudWatchAlarms
        Protocol: email


# --------------------------------------------------------------------------------------------------------------------------------------------------------
# Cloudwatch Event rules Lambda function and IAM Role
# Any reporting / alerts to end user should be via an SNS Topic – the subscriber is the provided email address
# --------------------------------------------------------------------------------------------------------------------------------------------------------
  RoleForCloudWatchEvents:
    Type: AWS::IAM::Role
    DependsOn: AlarmNotificationTopic
    Properties:
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
      - !Sub
        - arn:${Partition}:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - Partition:
            !If
            - GovCloudCondition
            - aws-us-gov
            - aws
      Policies:
      - PolicyName: CIS-AllowSnsPublish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: !Ref AlarmNotificationTopic
  FunctionToFormatCloudWatchEvent:
    Type: AWS::Lambda::Function
    DependsOn:
    - RoleForCloudWatchEvents
    - AlarmNotificationTopic
    Properties:
      FunctionName: CIS-FormatCloudWatchEvent
      Code:
        ZipFile: !Sub |
          #==================================================================================================
          # Function: process-cloudwatch-event
          # Purpose:  Processes CloudWatch Event before publishing to SNS.
          #==================================================================================================
          import boto3
          import json
          SNS_TOPIC_ARN = '${AlarmNotificationTopic}'
          #==================================================================================================
          # Function handler
          #==================================================================================================
          def lambda_handler(event, context):
            source = event['source']
            if source == 'aws.config':
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0} : {1}'.format(event['detail-type'], event['detail']['configRuleName']),
                MessageStructure = 'raw'
              )
            else:
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0}:{1}'.format(event['detail']['eventSource'], event['detail']['eventName']),
                MessageStructure = 'raw'
              )
      Description: Formats a given CloudWatch Event to be published to an SNS topic
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt RoleForCloudWatchEvents.Arn
      Runtime: python2.7
      Timeout: 5
  LambdaPermissionForCloudTrailCloudWatchEventRules:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionToFormatCloudWatchEvent
    Properties:
      FunctionName: !GetAtt FunctionToFormatCloudWatchEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
