---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: CloudTrail across all regions with KMS s3 bucket, cloudwatch log and alarms, Guardduty enable with notification event and config service with sns'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'CloudTrail'
      Parameters:
      - CloudtrailName
      - CloudWatchLogsRetentionInDays
      - CloudwatchLogGroupName
      - PrimaryEmailCloudwatchalarm
      - SecondaryEmailCloudwatchalarm
    - Label:
        default: 'GuardDuty'
      Parameters:
      - GuardDutyfindingPublish
      - PrimaryEmailGuardduty
    - Label:
        default: 'Config Service'
      Parameters:
      - DeliveryFrequency
      - PrimaryEmailConfigservice
    ParameterLabels:
      CloudtrailName:
        default: Cloudtrail Name
      CloudWatchLogsRetentionInDays:
        default: Cloudwatch Logs Retention Days
      CloudwatchLogGroupName:
        default: Cloudtrail logs Group Name in Cloudwatch
      PrimaryEmailCloudwatchalarm:
        default: Primary Email Address for Cloudwatch Alerts(Required)
      SecondaryEmailCloudwatchalarm:
        default: Primary Email Address for Cloudwatch Alerts
      GuardDutyfindingPublish:
        default: Enter Guardduty Finding Publish Frequency
      PrimaryEmailGuardduty:
        default: Email Address for Guardduty Findings
      DeliveryFrequency:
        default: Config Service Snapshot Delivery Frequency
      PrimaryEmailConfigservice:
        default: Email Address for Config Service Notification        
Parameters:
  CloudtrailName:
    Description: 'Name of Cloudtrail'
    Type: String
    Default: 'Master-Trail-DO_NOT_MODIFY'
    MinLength: '0'
    MaxLength: '64'
    AllowedPattern: "^(|[|\\w=,.@-]+)$"
    ConstraintDescription: "'Optional'The role name must contain only upper and lowercase alphanumeric characters with no spaces. These characters are alllowed: = , . @ -" 
  CloudWatchLogsRetentionInDays:
    Description: '"Optional" The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  CloudwatchLogGroupName:
    Description: '"Optional" Name of Cloudwatch Log Group'
    Type: String
    Default: 'CloudTrail/DefaultLogGroup'
    MinLength: '0'
    MaxLength: '512'
    AllowedPattern: "[\\w-/.]+"
    ConstraintDescription: "Log group names can be between 1 and 512 characters long. Allowed characters include a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period)."
  PrimaryEmailCloudwatchalarm:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Required'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  SecondaryEmailCloudwatchalarm:
    Type: String
    Description: 'Optional Secondary Email id.'
    AllowedPattern: ".+@.+"
    Default: 'example2@example.com'
    Description: "'Optional'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  GuardDutyfindingPublish:
    Type: String
    Description: "'Optional' Enter the Finding Publish Frequency Value."
    Default: FIFTEEN_MINUTES
    AllowedValues:
      - FIFTEEN_MINUTES
      - ONE_HOUR
      - Six_Hours
  PrimaryEmailGuardduty:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Optional' Enter the email address you want to notify  GuardDuty findings and events."
  DeliveryFrequency:
    Type: String
    Default: Six_Hours
    Description: "'Optional' The frequency with which AWS Config delivers configuration snapshots."
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  PrimaryEmailConfigservice:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Optional' Enter the email address you want to notify  stream change and notifications. ' this can cause a high volume of email.'"
Conditions:
  SecondarySubcription: !Not [!Equals [!Ref SecondaryEmailCloudwatchalarm, 'example2@example.com']]
  GuarddutySubcription: !Not [!Equals [!Ref PrimaryEmailGuardduty, 'example@example.com']]
  ConfigSubcription: !Not [!Equals [!Ref PrimaryEmailConfigservice, 'example@example.com']]
Resources:

#---------------------------
#Create Additional Resources(IAM)
#---------------------------
  forceiampolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "Force_MFA"
        Description: "This policy will force iam user to create MFA first. Without MFA user can not perform any operations."
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Sid: "AllowViewAccountInfo"
              Effect: "Allow"
              Action: 
                - "iam:GetAccountPasswordPolicy"
                - "iam:GetAccountSummary"
                - "iam:ListVirtualMFADevices"
              Resource: "*"
            - 
              Sid: "AllowManageOwnPasswords"
              Effect: "Allow"
              Action: 
                - "iam:ChangePassword"
                - "iam:GetUser"
              Resource: "arn:aws:iam::*:user/${aws:username}"             
            - 
              Sid: "AllowManageOwnAccessKeys"
              Effect: "Allow"
              Action: 
                - "iam:CreateAccessKey"
                - "iam:DeleteAccessKey"
                - "iam:ListAccessKeys"
                - "iam:UpdateAccessKey"
              Resource: "arn:aws:iam::*:user/${aws:username}"
            - 
              Sid: "AllowManageOwnSigningCertificates"
              Effect: "Allow"
              Action: 
                - "iam:DeleteSigningCertificate"
                - "iam:ListSigningCertificates"
                - "iam:UpdateSigningCertificate"
                - "iam:UploadSigningCertificate"
              Resource: "arn:aws:iam::*:user/${aws:username}"       
            - 
              Sid: "AllowManageOwnSSHPublicKeys"
              Effect: "Allow"
              Action: 
                - "iam:DeleteSSHPublicKey"
                - "iam:GetSSHPublicKey"
                - "iam:ListSSHPublicKeys"
                - "iam:UpdateSSHPublicKey"
                - "iam:UploadSSHPublicKey"
              Resource: "arn:aws:iam::*:user/${aws:username}"         
            - 
              Sid: "AllowManageOwnGitCredentials"
              Effect: "Allow"
              Action: 
                - "iam:CreateServiceSpecificCredential"
                - "iam:DeleteServiceSpecificCredential"
                - "iam:ListServiceSpecificCredentials"
                - "iam:ResetServiceSpecificCredential"
                - "iam:UpdateServiceSpecificCredential"
              Resource: "arn:aws:iam::*:user/${aws:username}"       
            - 
              Sid: "AllowManageOwnVirtualMFADevice"
              Effect: "Allow"
              Action: 
                - "iam:CreateVirtualMFADevice"
                - "iam:DeleteVirtualMFADevice"
              Resource: "arn:aws:iam::*:mfa/${aws:username}"
            - 
              Sid: "AllowManageOwnUserMFA"
              Effect: "Allow"
              Action: 
                - "iam:DeactivateMFADevice"
                - "iam:EnableMFADevice"
                - "iam:ListMFADevices"
                - "iam:ResyncMFADevice"
              Resource: "arn:aws:iam::*:user/${aws:username}"
            - 
              Sid: "DenyAllExceptListedIfNoMFA"
              Effect: "Deny"
              NotAction: 
                - "iam:CreateVirtualMFADevice"
                - "iam:EnableMFADevice"
                - "iam:GetUser"
                - "iam:ListMFADevices"
                - "iam:ListVirtualMFADevices"
                - "iam:ResyncMFADevice"
                - "sts:GetSessionToken"
              Resource: "*"
              Condition: 
                  BoolIfExists: 
                      aws:MultiFactorAuthPresent: "false" 
  IAMexecutionrole:
    DependsOn:
    - IAMAdminrole
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
                AWS:
                - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId',':role/AWSCloudFormationStackSetAdministrationRole']]
            Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess  
  IAMAdminrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole    
      Policies: 
        - 
          PolicyName: 'sts-assume-for-stack-admin'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - sts:AssumeRole
                Resource: '!Sub arn:aws:iam::${AWS::AccountId}:role/AWSCloudFormationStackSetExecutionRole'                      
#---------------------------------------
#CloudTrail & Cloudwatch Configuration
#---------------------------------------                      
  myKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: This will used by cloudtrail to store logs in s3 with encryption
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: Key policy created by CloudTrail
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
                Service: cloudtrail.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: "*"
            Condition:
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
          - Sid: Allow CloudTrail to describe key
            Effect: Allow
            Principal:
                Service: cloudtrail.amazonaws.com
            Action: kms:DescribeKey
            Resource: "*"
          - Sid: Allow principals in the account to decrypt log files
            Effect: Allow
            Principal:
                AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
          - Sid: Allow alias creation during setup
            Effect: Allow
            Principal:
              AWS: "*"
            Action: kms:CreateAlias
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringEquals:
                    kms:ViaService: !Sub ec2.${AWS::Region}.amazonaws.com
          - Sid: Enable cross account log decryption
            Effect: Allow
            Principal:
                AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
      Tags:
        - Key: Name
          Value: CMK for logs
  myKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
        AliasName: alias/Trail-Log-Encryption
        TargetKeyId:
            Ref: myKMSKey
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: !Sub "logging-bucket-${AWS::AccountId}"
        AccessControl: LogDeliveryWrite
        LifecycleConfiguration:
            Rules:
            - Id: Transition90daysRetain7yrs
              Status: Enabled
              ExpirationInDays: 2555
              Transition:
                TransitionInDays: 90
                StorageClass: STANDARD_IA
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
            Status: Enabled
        PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    DependsOn: LoggingBucket
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Statement:
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${LoggingBucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${LoggingBucket}/*"
  TrailBucket:
    DependsOn:
    - LoggingBucket
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: !Sub "cloudtrail-bucket-${AWS::AccountId}"
        AccessControl: Private
        VersioningConfiguration:
            Status: Enabled        
        LoggingConfiguration:
            DestinationBucketName: !Ref LoggingBucket
            LogFilePrefix: !Sub "cloudtrail-bucket-${AWS::AccountId}/"
        PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true 
        BucketEncryption:
            ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
  TrailBucketPolicy:
    DependsOn: TrailBucket
    DeletionPolicy: Retain
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${TrailBucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${TrailBucket}/*"
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref CloudwatchLogGroupName
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays
  TrailLogGroupRole:
    DependsOn: TrailLogGroup
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Cloudtrail-Cloudwatch-Loggroup
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action: logs:CreateLogStream
            Resource: !GetAtt TrailLogGroup.Arn
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action: logs:PutLogEvents
            Resource: !GetAtt TrailLogGroup.Arn
  CloudTrailTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
        DisplayName: Notify Cloudtrail Event
        TopicName: Cloudtrail-Event
  TrailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailSNSPolicy
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Resource: !Ref CloudTrailTopic
          Action: 'sns:Publish'
      Topics:
      - !Ref CloudTrailTopic
  Trail:
    DependsOn:
    - TrailTopicPolicy
    - TrailBucket
    - TrailBucketPolicy
    - myKMSKey
    - TrailLogGroupRole
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      TrailName: !Ref CloudtrailName
      S3BucketName: !Ref TrailBucket
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - 
            ReadWriteType: All
            IncludeManagementEvents: true
            DataResources: 
            - 
                Type: 'AWS::S3::Object'
                Values: 
                    -   'arn:aws:s3:::'
            -
                Type: 'AWS::Lambda::Function'
                Values:
                    -   'arn:aws:lambda'
      KMSKeyId: !Ref myKMSKey
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'CloudTrailTopic.TopicName'
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Notify Cloudwatch Alerts
      TopicName: CW-Notifications
      Subscription:
      - Endpoint:
          Ref: PrimaryEmailCloudwatchalarm
        Protocol: email
  SecondaryNotificationsub:
    Condition: SecondarySubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref SecondaryEmailCloudwatchalarm
        Protocol: email
        TopicArn: !Ref 'AlarmNotificationTopic'
  RoleForCloudWatchEvents:
    Type: AWS::IAM::Role
    DependsOn: AlarmNotificationTopic
    Properties:
      RoleName: Lambda-CW-Events-SNS
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
      Policies:
      - PolicyName: CIS-AllowSnsPublish
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action: sns:Publish
            Resource: "*"
  FunctionToFormatCloudWatchEvent:
    Type: AWS::Lambda::Function
    DependsOn:
    - RoleForCloudWatchEvents
    - AlarmNotificationTopic
    Properties:
      FunctionName: FormatCloudWatchEvent
      Code:
        ZipFile: !Sub |
          #==================================================================================================
          # Function: process-cloudwatch-event
          # Purpose:  Processes CloudWatch Event before publishing to SNS.
          #==================================================================================================
          import boto3
          import json
          SNS_TOPIC_ARN = '${AlarmNotificationTopic}'
          #==================================================================================================
          # Function handler
          #==================================================================================================
          def lambda_handler(event, context):
            source = event['source']
            if source == 'aws.config':
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0} : {1}'.format(event['detail-type'], event['detail']['configRuleName']),
                MessageStructure = 'raw'
              )
            else:
              response = boto3.client('sns').publish(
                TopicArn = SNS_TOPIC_ARN,
                Message = json.dumps(event, indent=4),
                Subject = 'NOTIFICATION {0}:{1}'.format(event['detail']['eventSource'], event['detail']['eventName']),
                MessageStructure = 'raw'
              )
      Description: Formats a given CloudWatch Event to be published to an SNS topic
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt RoleForCloudWatchEvents.Arn
      Runtime: python2.7
      Timeout: 5
  LambdaPermissionForCloudTrailCloudWatchEventRules:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionToFormatCloudWatchEvent
    Properties:
      FunctionName: !GetAtt FunctionToFormatCloudWatchEvent.Arn
      Action: lambda:InvokeFunction
      Principal: events.amazonaws.com
  ConsoleSignInFailuresMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInFailureCount
        MetricValue: '1'
  ConsoleSignInFailuresAlarm:
    DependsOn:
    - ConsoleSignInFailuresMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailConsoleSignInFailures
      AlarmDescription: Alarms when an unauthenticated API call is made to sign into the console.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '3'
      TreatMissingData: notBreaching
  AuthorizationFailuresMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: AuthorizationFailureCount
        MetricValue: '1'
  AuthorizationFailuresAlarm:
    DependsOn:
    - AuthorizationFailuresMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      TreatMissingData: notBreaching
      Statistic: Sum
      Threshold: '1'
  ConsoleSignInWithoutMfaMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ $.eventName = "ConsoleLogin" && $.additionalEventData.MFAUsed = "No" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInWithoutMfaEventCount
        MetricValue: '1'
  ConsoleSignInWithoutMFAAlarm:
    DependsOn:
    - ConsoleSignInWithoutMfaMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ConsoleSignInWithoutMFA
      AlarmDescription: Alarm for Management Console Sign-in without MFA.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInWithoutMfaEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching      
  RootuserIdentityusageMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: RootAccountUsageEventCount
        MetricValue: '1'
  RootAccountUsageAlarm:
    DependsOn:
    - RootuserIdentityusageMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RootAccountUsage
      AlarmDescription: Alarm for Usage of "root" Account.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: RootAccountUsageEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '60'
      Statistic: Sum
      Threshold: '1'
      TreatMissingData: notBreaching
  IamPolicyChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: IAMPolicychange
      Description: Publishes formatted IAM policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - iam.amazonaws.com
          eventName:
            - AttachGroupPolicy
            - AttachRolePolicy
            - AttachUserPolicy
            - CreateAccessKey
            - CreatePolicy
            - CreatePolicyVersion
            - DeleteAccessKey
            - DeletePolicy
            - DeletePolicyVersion
            - DeleteRolePolicy
            - DeleteUserPolicy
            - DetachGroupPolicy
            - DetachRolePolicy
            - DetachUserPolicy
            - PutGroupPolicy
            - PutRolePolicy
            - PutUserPolicy
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1       
  CloudTrailCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: CloudtrailChange
      Description: Publishes formatted CloudTrail change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - cloudtrail.amazonaws.com
          eventName:
          - StopLogging
          - DeleteTrail
          - UpdateTrail
          - CreateTrail
          - StartLogging
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  DetectS3BucketPolicyChanges:
    Type: AWS::Events::Rule
    Properties:
      Name: S3BucketPolicyChanges
      Description: Publishes formatted S3 bucket policy change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - s3.amazonaws.com
          eventName:
          - PutBucketAcl
          - PutBucketPolicy
          - PutBucketCors
          - PutBucketLifecycle
          - PutBucketReplication
          - DeleteBucketPolicy
          - DeleteBucketCors
          - DeleteBucketLifecycle
          - DeleteBucketReplication
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  EC2InstanceStatechangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: EC2statechange
      Description: Publishes formatted EC2 change events to an SNS topic
      EventPattern:
        Source: 
        - aws.ec2      
        detail-type:
        - EC2 Instance State-change Notification
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  CMKdeletecloudwatcheventrule:
    Type: AWS::Events::Rule
    Properties:
      Name: KMSDeleteordisable
      Description: Publishes formatted KMS change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - kms.amazonaws.com
          eventName:
          - DisableKey
          - ScheduleKeyDeletion
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1    
  DetectConfigChanges:
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigServiceChanges
      Description: Publishes formatted Config change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - config.amazonaws.com
          eventName:
          - PutConfigurationRecorder
          - StopConfigurationRecorder
          - DeleteDeliveryChannel
          - PutDeliveryChannel
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  ConfigRulesComplianceChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigRulesComplianceChanges
      Description: Publishes formatted Config Rules Compliance Changes events to an SNS topic
      EventPattern:
        detail-type:
        - Config Rules Compliance Change
        source:
        - aws.config
        detail:
          configRuleName:
          - mfa-enabled-for-iam-console-access
          - iam-user-unused-credentials-check
          - access-keys-rotated
          - iam-password-policy
          - iam-root-access-key-check
          - root-account-mfa-enabled
          - root-account-hardware-mfa-enabled
          - iam-user-no-policies-check
          - InstancesMustUseIamRoles
          - AwsSupportRoleExists
          - iam-policy-no-statements-with-admin-access
          - cloudtrail-enabled
          - cloud-trail-cloud-watch-logs-enabled
          - CloudTrailBucketMustBeSecure
          - cloud-trail-log-file-validation-enabled
          - cloud-trail-encryption-enabled
          - cmk-backing-key-rotation-enabled
          - vpc-flow-logs-enabled
          - restricted-ssh
          - restricted-3389-ports
          - vpc-default-security-group-closed
          - VpcPeeringRouteTablesMustBeLeastAccess
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1        
  SecurityGroupChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: SecurityGroupChanges
      Description: Publishes formatted security group change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AuthorizeSecurityGroupIngress
          - AuthorizeSecurityGroupEgress
          - RevokeSecurityGroupIngress
          - RevokeSecurityGroupEgress
          - CreateSecurityGroup
          - DeleteSecurityGroup
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkAclChangesCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkAclChanges
      Description: Publishes formatted network ACL change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - CreateNetworkAcl
          - CreateNetworkAclEntry
          - DeleteNetworkAcl
          - DeleteNetworkAclEntry
          - ReplaceNetworkAclEntry
          - ReplaceNetworkAclAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1
  NetworkChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: NetworkChangeEvents
      Description: Publishes formatted network change events to an SNS topic
      EventPattern:
        detail-type:
        - AWS API Call via CloudTrail
        detail:
          eventSource:
          - ec2.amazonaws.com
          eventName:
          - AcceptVpcPeeringConnection
          - AttachClassicLinkVpc
          - AttachInternetGateway
          - AssociateRouteTable
          - CreateCustomerGateway
          - CreateInternetGateway
          - CreateRoute
          - CreateRouteTable
          - CreateVpc
          - CreateVpcPeeringConnection
          - DeleteCustomerGateway
          - DeleteInternetGateway
          - DeleteRoute
          - DeleteRouteTable
          - DeleteDhcpOptions
          - DeleteVpc
          - DeleteVpcPeeringConnection
          - DetachClassicLinkVpc
          - DetachInternetGateway
          - DisableVpcClassicLink
          - DisassociateRouteTable
          - EnableVpcClassicLink
          - ModifyVpcAttribute
          - RejectVpcPeeringConnection
          - ReplaceRoute
          - ReplaceRouteTableAssociation
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1     
  ConfigRulesComplianceChangeCloudWatchEventRule:
    Type: AWS::Events::Rule
    Properties:
      Name: ConfigRulesComplianceChanges
      Description: Publishes formatted Config Rules Compliance Changes events to an SNS topic
      EventPattern:
        detail-type:
        - Config Rules Compliance Change
        source:
        - aws.config
        detail:
          configRuleName:
          - mfa-enabled-for-iam-console-access
          - iam-user-unused-credentials-check
          - access-keys-rotated
          - iam-password-policy
          - iam-root-access-key-check
          - root-account-mfa-enabled
          - root-account-hardware-mfa-enabled
          - iam-user-no-policies-check
          - InstancesMustUseIamRoles
          - iam-policy-no-statements-with-admin-access
          - AwsSupportRoleExists
          - cloudtrail-enabled
          - cloud-trail-cloud-watch-logs-enabled
          - CloudTrailBucketMustBeSecure
          - cloud-trail-log-file-validation-enabled
          - cloud-trail-encryption-enabled
          - cmk-backing-key-rotation-enabled
          - vpc-flow-logs-enabled
          - restricted-ssh
          - restricted-3389-ports
          - vpc-default-security-group-closed
          - VpcPeeringRouteTablesMustBeLeastAccess
      State: ENABLED
      Targets:
      - Arn: !GetAtt FunctionToFormatCloudWatchEvent.Arn
        Id: TargetFunctionV1 
#------------------------------------------
#Guardduty Configuration
#------------------------------------------        
  Detector:
    Type: 'AWS::GuardDuty::Detector'
    Properties:
      Enable: 'true'
      FindingPublishingFrequency: !Ref GuardDutyfindingPublish
  EventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Notify-GuardDuty-Event
      Description: This rule will notify guardduty events and finding to SNS.
      EventPattern:
        source:
          - aws.guardduty
      State: ENABLED
      Targets:
        - Arn: !Ref GaurddutyTopic
          Id: sns
  GaurddutyTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: GuardDuty-Findings
      DisplayName: AWS Guardduty Notification Topic
      Subscription: []
  GuardDutyTopicPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sns:Publish'
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              - !Ref GaurddutyTopic
      Topics:
        - !Ref GaurddutyTopic
    Type: 'AWS::SNS::TopicPolicy'
  GuarddutySubcription:
    Condition: GuarddutySubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref PrimaryEmailGuardduty
        Protocol: email
        TopicArn: !Ref 'GaurddutyTopic'
#----------------------------------------
#ConfigService Configurations
#----------------------------------------
  ConfigBucket:
    DependsOn: LoggingBucket
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "configservice-bucket-${AWS::AccountId}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled    
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: !Sub "configservice-bucket-${AWS::AccountId}/"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ConfigBucketPolicy:
    DependsOn: ConfigBucket
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:aws:s3:::${ConfigBucket}"
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*"
          - Sid: Enforce HTTPS Connections
            Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Restrict Delete* Actions
            Action: s3:Delete*
            Effect: Deny
            Principal: '*'
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"          
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSConfigServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - config.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      Policies:
      - PolicyName: CIS-configservice-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSConfigRole
            Effect: Allow
            Action:
            - config:Put*
            Resource: '*'
          - Sid: AWSCloudTrailConfig
            Effect: Allow
            Action:
            - cloudtrail:List*
            - cloudtrail:Desc*
            - cloudtrail:Look*
            - cloudtrail:Get*
            Resource: '*'
          - Sid: AWSConfigPutObject
            Effect: Allow
            Action: s3:PutObject
            Resource:
            - !Sub 'arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSConfigGetObject
            Effect: Allow
            Action: s3:GetBucketAcl
            Resource:
            - !Sub 'arn:aws:s3:::${ConfigBucket}'
  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Config-Service
      DisplayName: AWS Config Notification Topic
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com
  ConfigServiceSNS:
    Condition: ConfigSubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref PrimaryEmailConfigservice
        Protocol: email
        TopicArn: !Ref 'ConfigTopic'
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    DependsOn:
    - ConfigServiceRole
    Properties:
      Name: myconfigservice-recorder
      RoleARN: !GetAtt ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
    - ConfigTopic
    - ConfigBucket
    Properties:
      Name: myconfigservice-deliverychannel
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref DeliveryFrequency
      S3BucketName: !Ref ConfigBucket
      SnsTopicARN: !Ref ConfigTopic
  IAMConfigrule:
    Type: AWS::IAM::Role
    Properties:
      RoleName: Lambda-config-rule
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - lambda.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AmazonEC2ReadOnlyAccess
        - arn:aws:iam::aws:policy/AWSCloudTrailReadOnlyAccess
        - arn:aws:iam::aws:policy/IAMReadOnlyAccess
      Policies:
      - PolicyName: S3ReadOnly
        PolicyDocument:
          Version: 2012-10-17
          Statement:
          - Effect: Allow
            Action:
            - s3:GetBucketAcl
            - s3:GetBucketLogging
            - s3:GetBucketPolicy
            Resource: '*'
  ConfigRuleForEvaluateMFAAllUsers: 
    DependsOn: ConfigRecorder
    Type: "AWS::Config::ConfigRule"
    Properties: 
      ConfigRuleName: mfa-enabled-for-iam-console-access
      Description: "Checks whether AWS Multi-Factor Authentication (MFA) is enabled for all AWS Identity and Access Management (IAM) users that use a console password. The rule is compliant if MFA is enabled." 
      Source: 
        Owner: AWS
        SourceIdentifier: MFA_ENABLED_FOR_IAM_CONSOLE_ACCESS
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateUnusedCredentials: 
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: iam-user-unused-credentials-check
      Description: "Checks whether your AWS Identity and Access Management (IAM) users have passwords or active access keys that have not been used within 90 days you provided."
      InputParameters:
        maxCredentialUsageAge: 90
      Source: 
        Owner: AWS
        SourceIdentifier: IAM_USER_UNUSED_CREDENTIALS_CHECK
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateAccessKeys: 
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: access-keys-rotated
      Description: "Checks whether the active access keys are rotated within the number of days specified in maxAccessKeyAge. The rule is non-compliant if the access keys have not been rotated for more than maxAccessKeyAge number of days."
      InputParameters:
        maxAccessKeyAge: 90
      Source: 
        Owner: AWS
        SourceIdentifier: ACCESS_KEYS_ROTATED  
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForIamPasswordPolicy:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: iam-password-policy
      Description: "Checks whether the account password policy for IAM users meets the specified requirements."
      InputParameters:
        RequireUppercaseCharacters: true
        RequireLowercaseCharacters: true
        RequireSymbols: true
        RequireNumbers: true
        MinimumPasswordLength: 14
        PasswordReusePrevention: 24
        MaxPasswordAge: 90
      Source:
        Owner: AWS
        SourceIdentifier: IAM_PASSWORD_POLICY
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateRootAccessKeys:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: iam-root-access-key-check
      Description: "Checks whether the root user access key is available. The rule is compliant if the user access key does not exist."
      Source: 
        Owner: AWS
        SourceIdentifier: IAM_ROOT_ACCESS_KEY_CHECK  
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateRootMFAenable: 
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: root-account-mfa-enabled
      Description: "Checks whether the root user of your AWS account requires multi-factor authentication for console sign-in."
      Source: 
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_MFA_ENABLED  
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateRootMFAHardwareenable: 
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: root-account-hardware-mfa-enabled
      Description: "Checks whether your AWS account is enabled to use multi-factor authentication (MFA) hardware device to sign in with root credentials."
      Source: 
        Owner: AWS
        SourceIdentifier: ROOT_ACCOUNT_HARDWARE_MFA_ENABLED  
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateUserPolicyAssociations: 
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: iam-user-no-policies-check
      Description: "Checks that none of your IAM users have policies attached. IAM users must inherit permissions from IAM groups or roles."
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User      
      Source: 
        Owner: AWS
        SourceIdentifier: IAM_USER_NO_POLICIES_CHECK  
  FunctionForInstanceRoleUseRule:
    Type: AWS::Lambda::Function
    DependsOn:
    - IAMConfigrule
    - ConfigRecorder
    Properties:
      FunctionName: EvaluateInstanceRoleUse
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateInstanceRoleUse
          # Purpose:  Evaluates whether instances use instance roles
          #==================================================================================================
          import boto3
          import json
          def evaluate_compliance(config_item, instance_id):
            if (config_item['resourceType'] != 'AWS::EC2::Instance'): return 'NOT_APPLICABLE'
            if (config_item['configurationItemStatus'] == "ResourceDeleted"): return 'NOT_APPLICABLE'
            reservations = boto3.client('ec2').describe_instances(InstanceIds=[instance_id])['Reservations']
            if (reservations[0]['Instances'][0]['State']['Name']).upper() == 'TERMINATED':
              return 'NOT_APPLICABLE'
            if reservations and 'IamInstanceProfile' in reservations[0]['Instances'][0]: return 'COMPLIANT'
            else: return 'NON_COMPLIANT'
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            compliance_value = 'NOT_APPLICABLE'
            instance_id = invoking_event['configurationItem']['resourceId']
            compliance_value = evaluate_compliance(invoking_event['configurationItem'], instance_id)
            config = boto3.client('config')
            response = config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                  'ComplianceResourceId': instance_id,
                  'ComplianceType': compliance_value,
                  'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                },
              ],
              ResultToken=event['resultToken']
            )
      Description: Evaluates whether instances use instance roles
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt IAMConfigrule.Arn
      Runtime: python2.7
      Timeout: 10
  ConfigPermissionToCallInstanceRoleUseLambda:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForInstanceRoleUseRule
    - ConfigRecorder
    Properties:
      FunctionName: !GetAtt FunctionForInstanceRoleUseRule.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  ConfigRuleForInstanceRoleUses:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForInstanceRoleUseRule
    - ConfigPermissionToCallInstanceRoleUseLambda
    - ConfigRecorder
    Properties:
      ConfigRuleName: InstancesMustUseIamRoles
      Description: "Ensure IAM instance roles are used for AWS resource access from instances."
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::Instance
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt FunctionForInstanceRoleUseRule.Arn
      MaximumExecutionFrequency: One_Hour
  EvaluateAwsSupportAccessPolicyLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateAwsSupportAccessPolicy
    - ConfigRecorder
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateAwsSupportAccessPolicy
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateAwsSupportAccessPolicy:
    Type: AWS::Lambda::Function
    DependsOn:
    - IAMConfigrule
    - ConfigRecorder
    Properties:
      FunctionName: EvaluateSupportRoleExists
      Description: "Evaluates whether users / groups / roles have the 'AWSSupportAccess' policy associated."
      Code:
        ZipFile: |
          import boto3
          import json
          import os
          def evaluate_compliance(resource_type):
            return_value = 'COMPLIANT'
            client = boto3.client('iam')
            partition = 'aws'
            if (os.environ['AWS_REGION'].find("-gov-") > 0):
              partition = 'aws-us-gov'
            policy_arn = 'arn:' + partition + ':iam::aws:policy/AWSSupportAccess'
            print 'policyarn = ', policy_arn
            # If GovCloud, dont evaluate as the Managed Policy 'AWSSupportAccess' doesn't exist
            if (policy_arn.find("-gov") > 0):
              return 'NOT_APPLICABLE'
            # search for all entities that have a specific policy associated: AWSSupportAccess
            response = client.list_entities_for_policy(PolicyArn=policy_arn)
            if (resource_type) == 'user' and len(response['PolicyUsers']) == 0:
              return_value = 'NOT_APPLICABLE'
            elif (resource_type) == 'group' and len(response['PolicyGroups']) == 0:
              return_value = 'NOT_APPLICABLE'
            elif (resource_type) == 'role' and len(response['PolicyRoles']) == 0:
              return_value = 'NOT_APPLICABLE'
            else:
              return_value = 'COMPLIANT'
            return return_value
          def lambda_handler(event, context):
            invoking_event = json.loads(event['invokingEvent'])
            config = boto3.client('config')
            userAnnotation = 'Atleast one IAM User has the AWSSupportAccess IAM policy assigned'
            grpAnnotation = 'Atleast one IAM Group has the AWSSupportAccess IAM policy assigned'
            roleAnnotation = 'Atleast one IAM Role has the AWSSupportAccess IAM policy assigned'
            userCompliance = evaluate_compliance('user')
            groupCompliance = evaluate_compliance('group')
            roleCompliance = evaluate_compliance('role')
            response = config.put_evaluations(
              Evaluations=[
                {
                  'ComplianceResourceType': 'AWS::IAM::User',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': userCompliance,
                  'Annotation': userAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                },
                {
                  'ComplianceResourceType': 'AWS::IAM::Group',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': groupCompliance,
                  'Annotation': grpAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                },
                {
                  'ComplianceResourceType': 'AWS::IAM::Role',
                  'ComplianceResourceId': 'NA',
                  'ComplianceType': roleCompliance,
                  'Annotation': roleAnnotation,
                  'OrderingTimestamp': invoking_event['notificationCreationTime']
                }
              ],
              ResultToken=event['resultToken']
            )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        !GetAtt
        - IAMConfigrule
        - Arn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateAwsSupportAccessPolicy:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateAwsSupportAccessPolicy
    - EvaluateAwsSupportAccessPolicyLambdaInvokePermission
    - ConfigRecorder
    Properties:
      ConfigRuleName: AwsSupportRoleExists
      Description: "Ensure a support role has been created to manage incidents with AWS Support."
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::User
        - AWS::IAM::Group
        - AWS::IAM::Role
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateAwsSupportAccessPolicy
          - Arn
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateFullAdminPrivilegesPolicies:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: iam-policy-no-statements-with-admin-access
      Description: "Checks whether the default version of AWS Identity and Access Management (IAM) policies do not have administrator access. If any statement has \"Effect\": \"Allow\" with \"Action\": \"*\" over \"Resource\": \"*\", the rule is non-compliant."
      Scope:
        ComplianceResourceTypes:
        - AWS::IAM::Policy
      Source: 
        Owner: AWS
        SourceIdentifier: IAM_POLICY_NO_STATEMENTS_WITH_ADMIN_ACCESS  
  ConfigRuleForEvaluateCloudTrailLogsEncryption:
    DependsOn: 
    - Trail
    - ConfigRecorder
    Type: "AWS::Config::ConfigRule"
    Properties: 
      ConfigRuleName: cloudtrail-enabled
      Description: "Checks whether AWS CloudTrail is enabled in your AWS account."
      InputParameters:
        s3BucketName: !Sub "cloudtrail-bucket-${AWS::AccountId}"
        snsTopicArn: !GetAtt 'CloudTrailTopic.TopicName'
        cloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroupRole.Arn'
      Source: 
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENABLED
      MaximumExecutionFrequency: One_Hour        
  ConfigRuleForEvaluateCloudTrailIntegratedCloudwatch:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: cloud-trail-cloud-watch-logs-enabled
      Description: "Checks whether AWS CloudTrail trails are configured to send logs to Amazon CloudWatch logs. The trail is non-compliant if the CloudWatchLogsLogGroupArn property of the trail is empty."
      Source: 
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_CLOUD_WATCH_LOGS_ENABLED      
  EvaluateCloudTrailS3AccessLoggingLambdaInvokePermission:
    Type: AWS::Lambda::Permission
    DependsOn:
    - FunctionForEvaluateCloudTrailS3AccessLogging
    - ConfigRecorder
    Properties:
      FunctionName:
        !GetAtt
        - FunctionForEvaluateCloudTrailS3AccessLogging
        - Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  FunctionForEvaluateCloudTrailS3AccessLogging:
    Type: AWS::Lambda::Function
    DependsOn:
    - IAMConfigrule
    - ConfigRecorder
    Properties:
      FunctionName: EvaluateCloudTrailBucket
      Description: Evaluates whether access logging is enabled on the CloudTrail S3 bucket and the S3 bucket is not publicly accessible."
      Code:
        ZipFile: |
          import json
          import boto3
          import datetime
          import time
          from botocore.exceptions import ClientError
          def lambda_handler(event, context):
            # get the trail for the current region
            client_ct = boto3.client('cloudtrail')
            for trail in client_ct.describe_trails(includeShadowTrails = False)['trailList']:
              annotation = ''
              is_publicly_accessible = False
              s3_bucket_name = ''
              is_compliant = True
              # check if the cloudtrail s3 bucket is publicly accessible and logged
              if trail['S3BucketName']:
                s3_bucket_name = trail['S3BucketName']
                client_s=boto3.client('s3')
                annotation = 'CloudTrail S3 bucket \'{}\': '.format(s3_bucket_name)
                try:
                  for grant in client_s.get_bucket_acl(Bucket = s3_bucket_name)['Grants']:
                    # verify cloudtrail s3 bucket ACL
                    if grant['Permission'] in ['READ','FULL_CONTROL','WRITE_ACP','READ_ACP','WRITE'] and ('URI' in grant['Grantee'] and ('AuthenticatedUsers' in grant['Grantee']['URI'] or 'AllUsers' in grant['Grantee']['URI'])):
                      is_publicly_accessible = True
                  if is_publicly_accessible:
                    is_compliant = False
                    annotation = annotation + ' is publicly accessible by using bucket ACLs;'
                  # verify cloudtrail s3 bucket logging
                  response = client_s.get_bucket_logging(Bucket = s3_bucket_name)
                  if 'LoggingEnabled' not in response:
                    is_compliant=False
                    annotation = annotation + ' does not have logging enabled;'
                # verify cloudtrail s3 bucket policy
                  is_compliant_policy = True
                  bucket_policy = client_s.get_bucket_policy(Bucket=s3_bucket_name)['Policy']
                  bucket_policy_statements = json.loads(bucket_policy)['Statement']
                  for statement in bucket_policy_statements:
                    if statement['Effect'] in ['Allow'] and statement['Principal'] in ['*']:
                      is_compliant_policy = False
                    elif statement['Effect'] in ['Allow'] and 'AWS' in statement['Principal'] and statement['Principal']['AWS'] in ['*']:
                      is_compliant_policy = False
                  if not is_compliant_policy:
                    annotation = annotation + ' is publicly accessible by using bucket policies;'
                    is_compliant = False
                except Exception as ex:
                  if '(NoSuchBucketPolicy)' in str(ex):
                    annotation = annotation + ' does not have a bucket policy;'
                  else:
                    is_compliant = False
                    annotation = annotation + ' There was an error looking up CloudTrail S3 bucket;'
              else:
                annotation = annotation + ' CloudTrail is not integrated with S3;'
              result_token = 'No token found.'
              if 'resultToken' in event: result_token = event['resultToken']
              evaluations = [
                {
                  'ComplianceResourceType': 'AWS::S3::Bucket',
                  'ComplianceResourceId': s3_bucket_name,
                  'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',
                  'OrderingTimestamp': datetime.datetime.now()
                }
              ]
              if is_compliant: annotation = 'Acces logging is enabled on the CloudTrail S3 bucket \'{}\' and the S3 bucket is not publicly accessible'.format(s3_bucket_name)
              if annotation: evaluations[0]['Annotation'] = annotation
              config = boto3.client('config')
              config.put_evaluations(
                Evaluations = evaluations,
                ResultToken = result_token
              )
      Handler: index.lambda_handler
      MemorySize: 1024
      Role:
        !GetAtt
        - IAMConfigrule
        - Arn
      Runtime: python2.7
      Timeout: 10
  ConfigRuleForEvaluateCloudTrailS3AccessLogging:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForEvaluateCloudTrailS3AccessLogging
    - EvaluateCloudTrailS3AccessLoggingLambdaInvokePermission
    - ConfigRecorder
    Properties:
      ConfigRuleName: CloudTrailBucketMustBeSecure
      Description: "ConfigRule to evaluate whether access logging is enabled on the CloudTrail S3 bucket and the S3 bucket is not publicly accessible for CIS."
      Scope:
        ComplianceResourceTypes:
        - AWS::CloudTrail::Trail
        - AWS::S3::Bucket
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier:
          !GetAtt
          - FunctionForEvaluateCloudTrailS3AccessLogging
          - Arn
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateCloudTrailLogsValidation:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: cloud-trail-log-file-validation-enabled
      Description: "Checks whether AWS CloudTrail creates a signed digest file with logs. AWS recommends that the file validation must be enabled on all trails. The rule is noncompliant if the validation is not enabled."
      Source: 
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_LOG_FILE_VALIDATION_ENABLED
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluateCloudTrailLogsEncryption:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: cloud-trail-encryption-enabled
      Description: "Checks whether AWS CloudTrail is configured to use the server side encryption (SSE) AWS Key Management Service (AWS KMS) customer master key (CMK) encryption. The rule is compliant if the KmsKeyId is defined."
      Source: 
        Owner: AWS
        SourceIdentifier: CLOUD_TRAIL_ENCRYPTION_ENABLED
      MaximumExecutionFrequency: One_Hour   
#####**********Regional Rules*************    
  ConfigRuleForEvaluateCMKsRotation:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: cmk-backing-key-rotation-enabled
      Description: "Checks that key rotation is enabled for each key and matches to the key ID of the customer created customer master key (CMK). The rule is compliant, if the key rotation is enabled for specific key object."
      Source: 
        Owner: AWS
        SourceIdentifier: CMK_BACKING_KEY_ROTATION_ENABLED
      MaximumExecutionFrequency: One_Hour  
  ConfigRuleForEvaluateVpcFlowLogs:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: vpc-flow-logs-enabled
      Description: "Checks whether Amazon Virtual Private Cloud flow logs are found and enabled for Amazon VPC."
      Source: 
        Owner: AWS
        SourceIdentifier: VPC_FLOW_LOGS_ENABLED
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluatesshport:
    Type: "AWS::Config::ConfigRule"
    DependsOn: ConfigRecorder
    Properties: 
      ConfigRuleName: restricted-ssh
      Description: "Checks whether security groups that are in use disallow unrestricted incoming SSH traffic."
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source: 
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
  ConfigRuleForEvaluateRdpport:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: restricted-3389-ports
      Description: "Checks whether security groups that are in use disallow '3389' unrestricted incoming TCP traffic to the specified ports."
      InputParameters:
        blockedPort1: '3389'
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC 
  ConfigRuleForEvaluateDefaultSecurityGroup:
    Type: AWS::Config::ConfigRule
    DependsOn: ConfigRecorder
    Properties:
      ConfigRuleName: vpc-default-security-group-closed
      Description: "Checks that the default security group of any Amazon Virtual Private Cloud (VPC) does not allow inbound or outbound traffic. The rule is non-compliant if the default security group has one or more inbound or outbound traffic."
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED 
  FunctionForVpcPeeringRouteTablesRule:
    Type: AWS::Lambda::Function
    DependsOn:
    - IAMConfigrule
    - ConfigRecorder
    Properties:
      FunctionName: EvaluateVpcPeeringRouteTables
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateVpcPeeringRouteTables
          # Purpose:  Evaluates whether VPC route tables are least access
          #==================================================================================================
          import boto3
          import json
          def lambda_handler(event, context):
            is_compliant = True
            invoking_event = json.loads(event['invokingEvent'])
            annotation = ''
            route_table_id = invoking_event['configurationItem']['resourceId']
            #print (json.dumps(boto3.client('ec2').describe_route_tables(RouteTableIds=[route_table_id])))
            for route_table in boto3.client('ec2').describe_route_tables(RouteTableIds=[route_table_id])['RouteTables']:
              for route in route_table['Routes']:
                if 'VpcPeeringConnectionId' in route:
                  if int(str(route['DestinationCidrBlock']).split("/", 1)[1]) < 24:
                    is_compliant = False
                    annotation = 'VPC peered route table has a large CIDR block destination.'
              evaluations = [
                {
                  'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                  'ComplianceResourceId': route_table_id,
                  'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',
                  'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                }
              ]
              if annotation: evaluations[0]['Annotation'] = annotation
              response = boto3.client('config').put_evaluations(
              Evaluations = evaluations,
              ResultToken = event['resultToken'])
      Description: Evaluates whether VPC peered route tables are least access
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !GetAtt IAMConfigrule.Arn
      Runtime: python2.7
      Timeout: 10
  ConfigPermissionToCallVpcPeeringRouteTablesLambda:
    Type: AWS::Lambda::Permission
    DependsOn: 
    - FunctionForVpcPeeringRouteTablesRule
    - ConfigRecorder
    Properties:
      FunctionName: !GetAtt FunctionForVpcPeeringRouteTablesRule.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  ConfigRuleForVpcPeeringRouteTabless:
    Type: AWS::Config::ConfigRule
    DependsOn:
    - FunctionForVpcPeeringRouteTablesRule
    - ConfigPermissionToCallVpcPeeringRouteTablesLambda
    - ConfigRecorder
    Properties:
      ConfigRuleName: VpcPeeringRouteTablesMustBeLeastAccess
      Description: Evaluates whether VPC peered route tables are least access
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::RouteTable
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt FunctionForVpcPeeringRouteTablesRule.Arn  
      MaximumExecutionFrequency: One_Hour      
Outputs:
  ForceMFAPolicy:
    Description: 'Name of Force MFA Policy'
    Value: !Ref forceiampolicy
  SNSTopicname:
    Description: 'Name of SNS created for Cloudtrail events'
    Value: !GetAtt 'CloudTrailTopic.TopicName'
  ConfigS3BucketName: 
    Description: "S3 Bucket Name for Config Service"
    Value: !Ref ConfigBucket
    Export: 
      Name: !Sub "${AWS::StackName}-CONFIGBUCKETNAME"
  ConfigIAMRole:
    Description: "IAM Role for configservice"
    Value: !GetAtt ConfigServiceRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-CONFIGROLEARN"
  AdminIAMRole:
    Description: "IAM Role for Administrator"
    Value: !Ref IAMAdminrole
    Export: 
      Name: !Sub "${AWS::StackName}-ADMINROLENAME"
  ExecutionIAMRole:
    Description: "IAM Role for Execution"
    Value: !Ref IAMexecutionrole
    Export: 
      Name: !Sub "${AWS::StackName}-EXECUTIONROLENAME"
  IAMConfigRole:
    Description: 'IAM Role for Lambda service for config rule'
    Value: !GetAtt 'IAMConfigrule.Arn'    
    Export: 
      Name: !Sub "${AWS::StackName}-LAMBDACONFIGROLEARN"