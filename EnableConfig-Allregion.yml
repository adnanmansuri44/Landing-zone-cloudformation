AWSTemplateFormatVersion: 2010-09-09
Description: Enable AWS Config Service in region by stackset required execution and admin role   
Parameters:
  ConfigS3bucketname:
    Type: String
    Description: Name of s3 bucket which created by Master stack.
    Default: "configservice-bucket-366775409521"
  ConfigserviceIAMroleARN:
    Type: String
    Description: Enter Config Service IAM Role Arn which created by Master stack.
    Default: "arn:aws:iam::366775409521:role/AWSConfigServiceRole"
  Lambdaconfigrole:
    Type: String
    Description: Enter Config Service IAM Role Arn which created by Master stack.
    Default: "arn:aws:iam::366775409521:role/Lambda-config-rule"
  Configruleconfigure:
    Type: String
    Default: 'No'
    Description: "Configures AWS Config Rule regionally"
    AllowedValues:
    - 'Yes'
    - 'No'
  Frequency:
    Type: String
    Default: Six_Hours
    Description: The frequency with which AWS Config delivers configuration snapshots.
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  PrimaryEmail:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Optional' Enter the email address you want to notify  stream change and notifications. ' this can cause a high volume of email.'"
Conditions:
    Subcription: !Not [!Equals [!Ref PrimaryEmail, 'example@example.com']]
    Rules: !Not [!Equals [!Ref Configruleconfigure, 'No']]
Resources:
  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: configservice-topic
      DisplayName: AWS Config Notification Topic
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com
  NotifcationSNS:
    Condition: Subcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref PrimaryEmail
        Protocol: email
        TopicArn: !Ref 'ConfigTopic'
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    Properties:
      Name: myconfigservice-recorder
      RoleARN: !Ref ConfigserviceIAMroleARN  
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    Properties:
      Name: myconfigservice-deliverychannel
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref Frequency
      S3BucketName: !Ref ConfigS3bucketname
      SnsTopicARN: !Ref ConfigTopic
  ConfigRuleForEvaluateVpcFlowLogs:
    DependsOn: ConfigRecorder
    Condition: Rules
    Type: "AWS::Config::ConfigRule"
    Properties: 
      ConfigRuleName: vpc-flow-logs-enabled
      Description: "Checks whether Amazon Virtual Private Cloud flow logs are found and enabled for Amazon VPC."
      Source: 
        Owner: AWS
        SourceIdentifier: VPC_FLOW_LOGS_ENABLED
      MaximumExecutionFrequency: One_Hour
  ConfigRuleForEvaluatesshport:
    DependsOn: ConfigRecorder  
    Condition: Rules
    Type: "AWS::Config::ConfigRule"
    Properties: 
      ConfigRuleName: restricted-ssh
      Description: "Checks whether security groups that are in use disallow unrestricted incoming SSH traffic."
      Scope:
        ComplianceResourceTypes:
          - AWS::EC2::SecurityGroup
      Source: 
        Owner: AWS
        SourceIdentifier: INCOMING_SSH_DISABLED
  ConfigRuleForEvaluateRdpport:
    DependsOn: ConfigRecorder
    Condition: Rules
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: restricted-3389-ports
      Description: "Checks whether security groups that are in use disallow '3389' unrestricted incoming TCP traffic to the specified ports."
      InputParameters:
        blockedPort1: '3389'
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: RESTRICTED_INCOMING_TRAFFIC 
  ConfigRuleForEvaluateDefaultSecurityGroup:
    DependsOn: ConfigRecorder
    Condition: Rules
    Type: AWS::Config::ConfigRule
    Properties:
      ConfigRuleName: vpc-default-security-group-closed
      Description: "Checks that the default security group of any Amazon Virtual Private Cloud (VPC) does not allow inbound or outbound traffic. The rule is non-compliant if the default security group has one or more inbound or outbound traffic."
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::SecurityGroup
      Source:
        Owner: AWS
        SourceIdentifier: VPC_DEFAULT_SECURITY_GROUP_CLOSED 
  FunctionForVpcPeeringRouteTablesRule:
    Type: AWS::Lambda::Function
    Condition: Rules
    Properties:
      FunctionName: EvaluateVpcPeeringRouteTables
      Code:
        ZipFile: |
          #==================================================================================================
          # Function: EvaluateVpcPeeringRouteTables
          # Purpose:  Evaluates whether VPC route tables are least access
          #==================================================================================================
          import boto3
          import json
          def lambda_handler(event, context):
            is_compliant = True
            invoking_event = json.loads(event['invokingEvent'])
            annotation = ''
            route_table_id = invoking_event['configurationItem']['resourceId']
            #print (json.dumps(boto3.client('ec2').describe_route_tables(RouteTableIds=[route_table_id])))
            for route_table in boto3.client('ec2').describe_route_tables(RouteTableIds=[route_table_id])['RouteTables']:
              for route in route_table['Routes']:
                if 'VpcPeeringConnectionId' in route:
                  if int(str(route['DestinationCidrBlock']).split("/", 1)[1]) < 24:
                    is_compliant = False
                    annotation = 'VPC peered route table has a large CIDR block destination.'
              evaluations = [
                {
                  'ComplianceResourceType': invoking_event['configurationItem']['resourceType'],
                  'ComplianceResourceId': route_table_id,
                  'ComplianceType': 'COMPLIANT' if is_compliant else 'NON_COMPLIANT',
                  'OrderingTimestamp': invoking_event['configurationItem']['configurationItemCaptureTime']
                }
              ]
              if annotation: evaluations[0]['Annotation'] = annotation
              response = boto3.client('config').put_evaluations(
              Evaluations = evaluations,
              ResultToken = event['resultToken'])
      Description: Evaluates whether VPC peered route tables are least access
      Handler: index.lambda_handler
      MemorySize: 1024
      Role: !Ref Lambdaconfigrole     
      Runtime: python2.7
      Timeout: 10
  ConfigPermissionToCallVpcPeeringRouteTablesLambda:
    Type: AWS::Lambda::Permission
    Condition: Rules
    DependsOn: FunctionForVpcPeeringRouteTablesRule
    Properties:
      FunctionName: !GetAtt FunctionForVpcPeeringRouteTablesRule.Arn
      Action: lambda:InvokeFunction
      Principal: config.amazonaws.com
  ConfigRuleForVpcPeeringRouteTabless:
    Type: AWS::Config::ConfigRule
    Condition: Rules
    DependsOn:
    - FunctionForVpcPeeringRouteTablesRule
    - ConfigPermissionToCallVpcPeeringRouteTablesLambda
    - ConfigRecorder
    Properties:
      ConfigRuleName: VpcPeeringRouteTablesMustBeLeastAccess
      Description: Evaluates whether VPC peered route tables are least access
      Scope:
        ComplianceResourceTypes:
        - AWS::EC2::RouteTable
      Source:
        Owner: CUSTOM_LAMBDA
        SourceDetails:
        - EventSource: aws.config
          MessageType: ConfigurationItemChangeNotification
        SourceIdentifier: !GetAtt FunctionForVpcPeeringRouteTablesRule.Arn  
      MaximumExecutionFrequency: One_Hour      
Outputs:
  SNSTopicname:
    Description: 'Name of SNS created for Config events'
    Value: !GetAtt 'ConfigTopic.TopicName'