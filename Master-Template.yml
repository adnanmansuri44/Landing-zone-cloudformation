---
AWSTemplateFormatVersion: '2010-09-09'
Description: 'Security: CloudTrail across all regions with KMS s3 bucket, cloudwatch log and alarms, Guardduty enable with notification event and config service with sns'
Metadata:
  'AWS::CloudFormation::Interface':
    ParameterGroups:
    - Label:
        default: 'CloudTrail'
      Parameters:
      - CloudtrailName
      - CloudWatchLogsRetentionInDays
      - CloudwatchLogGroupName
      - PrimaryEmailCloudwatchalarm
      - SecondaryEmailCloudwatchalarm
    - Label:
        default: 'GuardDuty'
      Parameters:
      - GuardDutyfindingPublish
      - PrimaryEmailGuardduty
    - Label:
        default: 'Config Service'
      Parameters:
      - DeliveryFrequency
      - PrimaryEmailConfigservice
Parameters:
  CloudtrailName:
    Description: 'Name of Cloudtrail'
    Type: String
    Default: 'Master-Trail-DO_NOT_MODIFY'
    MinLength: '0'
    MaxLength: '64'
    AllowedPattern: "^(|[|\\w=,.@-]+)$"
    ConstraintDescription: "'Optional'The role name must contain only upper and lowercase alphanumeric characters with no spaces. These characters are alllowed: = , . @ -" 
  CloudWatchLogsRetentionInDays:
    Description: '"Optional" The number of days log events are kept in CloudWatch Logs'
    Type: Number
    Default: 90
    AllowedValues: [1, 3, 5, 7, 14, 30, 60, 90, 120, 150, 180, 365, 400, 545, 731, 1827, 3653]
  CloudwatchLogGroupName:
    Description: '"Optional" Name of Cloudwatch Log Group'
    Type: String
    Default: 'CloudTrail/DefaultLogGroup'
    MinLength: '0'
    MaxLength: '512'
    AllowedPattern: "[\\w-/.]+"
    ConstraintDescription: "Log group names can be between 1 and 512 characters long. Allowed characters include a-z, A-Z, 0-9, '_' (underscore), '-' (hyphen), '/' (forward slash), and '.' (period)."
  PrimaryEmailCloudwatchalarm:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Required'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  SecondaryEmailCloudwatchalarm:
    Type: String
    Description: 'Optional Secondary Email id.'
    AllowedPattern: ".+@.+"
    Default: 'example2@example.com'
    Description: "'Optional'Triggered alarms will alert to this email address. Verification required and you can opt-out later. Make sure to validate otherwise you won't be able to delete the subscription and have to wait 3 days for automatic deletion."
  GuardDutyfindingPublish:
    Type: String
    Description: "'Optional' Enter the Finding Publish Frequency Value."
    Default: FIFTEEN_MINUTES
    AllowedValues:
      - FIFTEEN_MINUTES
      - ONE_HOUR
      - Six_Hours
  PrimaryEmailGuardduty:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Optional' Enter the email address you want to notify  GuardDuty findings and events."
  DeliveryFrequency:
    Type: String
    Default: Six_Hours
    Description: "'Optional' The frequency with which AWS Config delivers configuration snapshots."
    AllowedValues:
      - One_Hour
      - Three_Hours
      - Six_Hours
      - Twelve_Hours
      - TwentyFour_Hours
  PrimaryEmailConfigservice:
    Type: String
    AllowedPattern: ".+@.+"
    Default: 'example@example.com'
    Description: "'Optional' Enter the email address you want to notify  stream change and notifications. ' this can cause a high volume of email.'"
Conditions:
  SecondarySubcription: !Not [!Equals [!Ref SecondaryEmailCloudwatchalarm, 'example2@example.com']]
  GuarddutySubcription: !Not [!Equals [!Ref PrimaryEmailGuardduty, 'example@example.com']]
  ConfigSubcription: !Not [!Equals [!Ref PrimaryEmailConfigservice, 'example@example.com']]
Resources:
  forceiampolicy: 
    Type: AWS::IAM::ManagedPolicy
    Properties: 
        ManagedPolicyName: "Force_MFA"
        Description: "This policy will force iam user to create MFA first. Without MFA user can not perform any operations."
        PolicyDocument: 
          Version: "2012-10-17"
          Statement: 
            - 
              Sid: "AllowViewAccountInfo"
              Effect: "Allow"
              Action: 
                - "iam:GetAccountPasswordPolicy"
                - "iam:GetAccountSummary"
                - "iam:ListVirtualMFADevices"
              Resource: "*"
            - 
              Sid: "AllowManageOwnPasswords"
              Effect: "Allow"
              Action: 
                - "iam:ChangePassword"
                - "iam:GetUser"
              Resource: "arn:aws:iam::*:user/${aws:username}"             
            - 
              Sid: "AllowManageOwnAccessKeys"
              Effect: "Allow"
              Action: 
                - "iam:CreateAccessKey"
                - "iam:DeleteAccessKey"
                - "iam:ListAccessKeys"
                - "iam:UpdateAccessKey"
              Resource: "arn:aws:iam::*:user/${aws:username}"
            - 
              Sid: "AllowManageOwnSigningCertificates"
              Effect: "Allow"
              Action: 
                - "iam:DeleteSigningCertificate"
                - "iam:ListSigningCertificates"
                - "iam:UpdateSigningCertificate"
                - "iam:UploadSigningCertificate"
              Resource: "arn:aws:iam::*:user/${aws:username}"       
            - 
              Sid: "AllowManageOwnSSHPublicKeys"
              Effect: "Allow"
              Action: 
                - "iam:DeleteSSHPublicKey"
                - "iam:GetSSHPublicKey"
                - "iam:ListSSHPublicKeys"
                - "iam:UpdateSSHPublicKey"
                - "iam:UploadSSHPublicKey"
              Resource: "arn:aws:iam::*:user/${aws:username}"         
            - 
              Sid: "AllowManageOwnGitCredentials"
              Effect: "Allow"
              Action: 
                - "iam:CreateServiceSpecificCredential"
                - "iam:DeleteServiceSpecificCredential"
                - "iam:ListServiceSpecificCredentials"
                - "iam:ResetServiceSpecificCredential"
                - "iam:UpdateServiceSpecificCredential"
              Resource: "arn:aws:iam::*:user/${aws:username}"       
            - 
              Sid: "AllowManageOwnVirtualMFADevice"
              Effect: "Allow"
              Action: 
                - "iam:CreateVirtualMFADevice"
                - "iam:DeleteVirtualMFADevice"
              Resource: "arn:aws:iam::*:mfa/${aws:username}"
            - 
              Sid: "AllowManageOwnUserMFA"
              Effect: "Allow"
              Action: 
                - "iam:DeactivateMFADevice"
                - "iam:EnableMFADevice"
                - "iam:ListMFADevices"
                - "iam:ResyncMFADevice"
              Resource: "arn:aws:iam::*:user/${aws:username}"
            - 
              Sid: "DenyAllExceptListedIfNoMFA"
              Effect: "Deny"
              NotAction: 
                - "iam:CreateVirtualMFADevice"
                - "iam:EnableMFADevice"
                - "iam:GetUser"
                - "iam:ListMFADevices"
                - "iam:ListVirtualMFADevices"
                - "iam:ResyncMFADevice"
                - "sts:GetSessionToken"
              Resource: "*"
              Condition: 
                  BoolIfExists: 
                      aws:MultiFactorAuthPresent: "false"  
  myKMSKey:
    Type: 'AWS::KMS::Key'
    Properties:
      Description: This will used by cloudtrail to store logs in s3 with encryption
      Enabled: true
      EnableKeyRotation: true
      KeyPolicy:
        Version: 2012-10-17
        Id: Key policy created by CloudTrail
        Statement:
          - Sid: Allow administration of the key
            Effect: Allow
            Principal:
              AWS: !Join 
                - ''
                - - 'arn:aws:iam::'
                  - !Ref 'AWS::AccountId'
                  - ':root'
            Action: 'kms:*'
            Resource: '*'
          - Sid: Enable IAM User Permissions
            Effect: Allow
            Principal:
                Service: cloudtrail.amazonaws.com
            Action: kms:GenerateDataKey*
            Resource: "*"
            Condition:
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
          - Sid: Allow CloudTrail to describe key
            Effect: Allow
            Principal:
                Service: cloudtrail.amazonaws.com
            Action: kms:DescribeKey
            Resource: "*"
          - Sid: Allow principals in the account to decrypt log files
            Effect: Allow
            Principal:
                AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
          - Sid: Allow alias creation during setup
            Effect: Allow
            Principal:
              AWS: "*"
            Action: kms:CreateAlias
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringEquals:
                    kms:ViaService: !Sub ec2.${AWS::Region}.amazonaws.com
          - Sid: Enable cross account log decryption
            Effect: Allow
            Principal:
                AWS: "*"
            Action:
            - kms:Decrypt
            - kms:ReEncryptFrom
            Resource: "*"
            Condition:
                StringEquals:
                    kms:CallerAccount: '!Ref AWS::AccountId'
                StringLike:
                    kms:EncryptionContext:aws:cloudtrail:arn: !Sub arn:aws:cloudtrail:*:${AWS::AccountId}:trail/*
      Tags:
        - Key: Name
          Value: CMK for logs
  myKeyAlias:
    Type: AWS::KMS::Alias
    Properties:
        AliasName: alias/Logencryption
        TargetKeyId:
            Ref: myKMSKey
  LoggingBucket:
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: !Sub "logging-bucket-${AWS::AccountId}"
        AccessControl: LogDeliveryWrite
        LifecycleConfiguration:
            Rules:
            - Id: Transition90daysRetain7yrs
              Status: Enabled
              ExpirationInDays: 2555
              Transition:
                TransitionInDays: 90
                StorageClass: STANDARD_IA
        BucketEncryption:
          ServerSideEncryptionConfiguration:
            - ServerSideEncryptionByDefault:
                SSEAlgorithm: AES256
        VersioningConfiguration:
            Status: Enabled
        PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true
  LoggingBucketPolicy:
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    DependsOn: LoggingBucket
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Statement:
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${LoggingBucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${LoggingBucket}/*"
  TrailBucket:
    DependsOn:
    - LoggingBucket
    Type: 'AWS::S3::Bucket'
    DeletionPolicy: Retain
    Properties:
        BucketName: !Sub "cloudtrail-bucket-${AWS::AccountId}"
        AccessControl: Private
        VersioningConfiguration:
            Status: Enabled        
        LoggingConfiguration:
            DestinationBucketName: !Ref LoggingBucket
            LogFilePrefix: !Sub "cloudtrail-bucket-${AWS::AccountId}/"
        PublicAccessBlockConfiguration:
            BlockPublicAcls: true
            BlockPublicPolicy: true
            IgnorePublicAcls: true
            RestrictPublicBuckets: true 
        BucketEncryption:
            ServerSideEncryptionConfiguration:
                - ServerSideEncryptionByDefault:
                    SSEAlgorithm: AES256
  TrailBucketPolicy:
    DependsOn: TrailBucket
    DeletionPolicy: Retain
    Type: 'AWS::S3::BucketPolicy'
    Properties:
      Bucket: !Ref TrailBucket
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailAclCheck
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:GetBucketAcl'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}'
        - Sid: AWSCloudTrailWrite
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 's3:PutObject'
          Resource: !Sub 'arn:aws:s3:::${TrailBucket}/AWSLogs/${AWS::AccountId}/*'
          Condition:
            StringEquals:
              's3:x-amz-acl': 'bucket-owner-full-control'
        - Sid: Enforce HTTPS Connections
          Action: s3:*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${TrailBucket}/*"
          Condition:
            Bool:
              aws:SecureTransport: false
        - Sid: Restrict Delete* Actions
          Action: s3:Delete*
          Effect: Deny
          Principal: '*'
          Resource: !Sub "arn:aws:s3:::${TrailBucket}/*"
  TrailLogGroup:
    Type: 'AWS::Logs::LogGroup'
    Properties:
      LogGroupName: !Ref CloudwatchLogGroupName
      RetentionInDays: !Ref CloudWatchLogsRetentionInDays
  TrailLogGroupRole:
    DependsOn: TrailLogGroup
    Type: 'AWS::IAM::Role'
    Properties:
      RoleName: Cloudtrail-Cloudwatch-Loggroup
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AssumeRole1
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Action: 'sts:AssumeRole'
      Policies:
      - PolicyName: 'cloudtrail-policy'
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSCloudTrailCreateLogStream
            Effect: Allow
            Action: logs:CreateLogStream
            Resource: !GetAtt TrailLogGroup.Arn
          - Sid: AWSCloudTrailPutLogEvents
            Effect: Allow
            Action: logs:PutLogEvents
            Resource: !GetAtt TrailLogGroup.Arn
  CloudTrailTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
        DisplayName: Notify Cloudtrail Event
        TopicName: Cloudtrail-Event
  TrailTopicPolicy:
    Type: 'AWS::SNS::TopicPolicy'
    Properties:
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Sid: AWSCloudTrailSNSPolicy
          Effect: Allow
          Principal:
            Service: 'cloudtrail.amazonaws.com'
          Resource: !Ref CloudTrailTopic
          Action: 'sns:Publish'
      Topics:
      - !Ref CloudTrailTopic
  Trail:
    DependsOn:
    - TrailTopicPolicy
    - TrailBucket
    - TrailBucketPolicy
    - myKMSKey
    - TrailLogGroupRole
    Type: 'AWS::CloudTrail::Trail'
    Properties:
      TrailName: !Ref CloudtrailName
      S3BucketName: !Ref TrailBucket
      IncludeGlobalServiceEvents: true
      IsLogging: true
      IsMultiRegionTrail: true
      EnableLogFileValidation: true
      EventSelectors:
        - 
            ReadWriteType: All
            IncludeManagementEvents: true
            DataResources: 
            - 
                Type: 'AWS::S3::Object'
                Values: 
                    -   'arn:aws:s3:::'
            -
                Type: 'AWS::Lambda::Function'
                Values:
                    -   'arn:aws:lambda'
      KMSKeyId: !Ref myKMSKey
      CloudWatchLogsLogGroupArn: !GetAtt 'TrailLogGroup.Arn'
      CloudWatchLogsRoleArn: !GetAtt 'TrailLogGroupRole.Arn'
      SnsTopicName: !GetAtt 'CloudTrailTopic.TopicName'
  SecurityGroupChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = AuthorizeSecurityGroupIngress) || ($.eventName = AuthorizeSecurityGroupEgress) || ($.eventName = RevokeSecurityGroupIngress) || ($.eventName = RevokeSecurityGroupEgress) || ($.eventName = CreateSecurityGroup) || ($.eventName = DeleteSecurityGroup) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: SecurityGroupEventCount
        MetricValue: '1'
  SecurityGroupChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: SecurityGroupChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Security Group.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: SecurityGroupEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  NetworkAclChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = CreateNetworkAcl) || ($.eventName = CreateNetworkAclEntry) || ($.eventName = DeleteNetworkAcl) || ($.eventName = DeleteNetworkAclEntry) || ($.eventName = ReplaceNetworkAclEntry) || ($.eventName = ReplaceNetworkAclAssociation) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: NetworkAclEventCount
        MetricValue: '1'
  NetworkAclChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: NetworkAclChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Network ACL.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: NetworkAclEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  NetworkGatewayChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = CreateCustomerGateway) || ($.eventName = DeleteCustomerGateway) || ($.eventName = AttachInternetGateway) || ($.eventName = CreateInternetGateway) || ($.eventName = DeleteInternetGateway) || ($.eventName = DetachInternetGateway) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: GatewayEventCount
        MetricValue: '1'
  GatewayChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: NetworkGatewayChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a Customer or Internet Gateway.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: GatewayEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  VpcChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = CreateVpc) || ($.eventName = DeleteVpc) || ($.eventName = ModifyVpcAttribute) || ($.eventName = AcceptVpcPeeringConnection) || ($.eventName = CreateVpcPeeringConnection) || ($.eventName = DeleteVpcPeeringConnection) || ($.eventName = RejectVpcPeeringConnection) || ($.eventName = AttachClassicLinkVpc) || ($.eventName = DetachClassicLinkVpc) || ($.eventName = DisableVpcClassicLink) || ($.eventName = EnableVpcClassicLink) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: VpcEventCount
        MetricValue: '1'
  VpcChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: VpcChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a VPC, VPC peering connection or VPC connection to classic.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: VpcEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  EC2InstanceChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = RunInstances) || ($.eventName = RebootInstances) || ($.eventName = StartInstances) || ($.eventName = StopInstances) || ($.eventName = TerminateInstances) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: EC2InstanceEventCount
        MetricValue: '1'
  EC2InstanceChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: EC2InstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start,stop or reboot an EC2 instance.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: EC2InstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  EC2LargeInstanceChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = RunInstances) && (($.requestParameters.instanceType = *.8xlarge) || ($.requestParameters.instanceType = *.4xlarge)) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: EC2LargeInstanceEventCount
        MetricValue: '1'
  EC2LargeInstanceChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailEC2LargeInstanceChanges
      AlarmDescription: Alarms when an API call is made to create, terminate, start, stop or reboot a 4x or 8x-large EC2 instance.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: EC2LargeInstanceEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  CloudTrailChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = CreateTrail) || ($.eventName = UpdateTrail) || ($.eventName = DeleteTrail) || ($.eventName = StartLogging) || ($.eventName = StopLogging) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: CloudTrailEventCount
        MetricValue: '1'
  CloudTrailChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailChanges
      AlarmDescription: Alarms when an API call is made to create, update or delete a CloudTrail trail, or to start or stop logging to a trail.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: CloudTrailEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ConsoleSignInFailuresMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ ($.eventName = ConsoleLogin) && ($.errorMessage = "Failed authentication") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInFailureCount
        MetricValue: '1'
  ConsoleSignInFailuresAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailConsoleSignInFailures
      AlarmDescription: Alarms when an unauthenticated API call is made to sign into the console.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '3'
  AuthorizationFailuresMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ ($.errorCode = "*UnauthorizedOperation") || ($.errorCode = "AccessDenied*") }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: AuthorizationFailureCount
        MetricValue: '1'
  AuthorizationFailuresAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailAuthorizationFailures
      AlarmDescription: Alarms when an unauthorized API call is made.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: AuthorizationFailureCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  IAMPolicyChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{($.eventName=DeleteGroupPolicy)||($.eventName=DeleteRolePolicy)||($.eventName=DeleteUserPolicy)||($.eventName=PutGroupPolicy)||($.eventName=PutRolePolicy)||($.eventName=PutUserPolicy)||($.eventName=CreatePolicy)||($.eventName=DeletePolicy)||($.eventName=CreatePolicyVersion)||($.eventName=DeletePolicyVersion)||($.eventName=AttachRolePolicy)||($.eventName=DetachRolePolicy)||($.eventName=AttachUserPolicy)||($.eventName=DetachUserPolicy)||($.eventName=AttachGroupPolicy)||($.eventName=DetachGroupPolicy)}"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: IAMPolicyEventCount
        MetricValue: '1'
  IAMPolicyChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: CloudTrailIAMPolicyChanges
      AlarmDescription: Alarms when an API call is made to change an IAM policy.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: IAMPolicyEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ConfigserviceChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{($.eventSource = config.amazonaws.com) && (($.eventName=StopConfigurationRecorder)||($.eventName=DeleteDeliveryChannel)||($.eventName=PutDeliveryChannel)||($.eventName=PutConfigurationRecorder))}'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConfigServiceChangescount
        MetricValue: '1'
  ConfigServiceChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ConfigServiceChanges
      AlarmDescription: Alarm for AWS Config Configuration Changes.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConfigServiceChangescount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  ConsoleSignInWithoutMfaMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ $.eventName = "ConsoleLogin" && $.additionalEventData.MFAUsed = "No" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: ConsoleSignInWithoutMfaEventCount
        MetricValue: '1'
  ConsoleSignInWithoutMFAAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: ConsoleSignInWithoutMFA
      AlarmDescription: Alarm for Management Console Sign-in without MFA.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: ConsoleSignInWithoutMfaEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  DisabledOrDeletedCmksMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{($.eventSource = kms.amazonaws.com) && (($.eventName=DisableKey)||($.eventName=ScheduleKeyDeletion))}"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: DisableorDeletedCmkEventCount
        MetricValue: '1'
  DisableordeleteofCMKsAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: DisableordeleteofCMKs
      AlarmDescription: Alarm for Disabling or Scheduled Deletion of Customer Created CMKs.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: DisableorDeletedCmkEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  RouteTableConfigChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventName = CreateRoute) || ($.eventName = CreateRouteTable) || ($.eventName = ReplaceRoute) || ($.eventName = ReplaceRouteTableAssociation) || ($.eventName = DeleteRouteTable) || ($.eventName = DeleteRoute) || ($.eventName = DisassociateRouteTable) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: RouteTableEventCount
        MetricValue: '1'
  RouteTableChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RouteTableChanges
      AlarmDescription: Alarm for Route Table Changes.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: RouteTableEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  S3BucketPolicyChangesMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: "{ ($.eventSource = s3.amazonaws.com) && (($.eventName = PutBucketAcl) || ($.eventName = PutBucketPolicy) || ($.eventName = PutBucketCors) || ($.eventName = PutBucketLifecycle) || ($.eventName = PutBucketReplication) || ($.eventName = DeleteBucketPolicy) || ($.eventName = DeleteBucketCors) || ($.eventName = DeleteBucketLifecycle) || ($.eventName = DeleteBucketReplication)) }"
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: S3BucketPolicyEventCount
        MetricValue: '1'
  S3BucketPolicyChangesAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: S3BucketPolicyChanges
      AlarmDescription: Alarm for S3 Bucket Policy Changes.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: S3BucketPolicyEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  RootuserIdentityusageMetricFilter:
    DependsOn:
    - TrailLogGroup
    Type: AWS::Logs::MetricFilter
    Properties:
      LogGroupName:
        Ref: CloudwatchLogGroupName
      FilterPattern: '{ $.userIdentity.type = "Root" && $.userIdentity.invokedBy NOT EXISTS && $.eventType != "AwsServiceEvent" }'
      MetricTransformations:
      - MetricNamespace: CloudTrailMetrics
        MetricName: RootAccountUsageEventCount
        MetricValue: '1'
  RootAccountUsageAlarm:
    DependsOn:
    - SecurityGroupChangesMetricFilter
    Type: AWS::CloudWatch::Alarm
    Properties:
      AlarmName: RootAccountUsage
      AlarmDescription: Alarm for Usage of "root" Account.
      AlarmActions:
      - Ref: AlarmNotificationTopic
      MetricName: RootAccountUsageEventCount
      Namespace: CloudTrailMetrics
      ComparisonOperator: GreaterThanOrEqualToThreshold
      EvaluationPeriods: '1'
      Period: '300'
      Statistic: Sum
      Threshold: '1'
  AlarmNotificationTopic:
    Type: AWS::SNS::Topic
    Properties:
      DisplayName: Notify Cloudwatch Alarm
      TopicName: CloudwatchAlarm
      Subscription:
      - Endpoint:
          Ref: PrimaryEmailCloudwatchalarm
        Protocol: email
  SecondaryNotificationsub:
    Condition: SecondarySubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref SecondaryEmailCloudwatchalarm
        Protocol: email
        TopicArn: !Ref 'AlarmNotificationTopic'
  Detector:
    Type: 'AWS::GuardDuty::Detector'
    Properties:
      Enable: 'true'
      FindingPublishingFrequency: !Ref GuardDutyfindingPublish
  EventsRule:
    Type: 'AWS::Events::Rule'
    Properties:
      Name: Notify-GuardDuty-Event
      Description: This rule will notify guardduty events and finding to SNS.
      EventPattern:
        source:
          - aws.guardduty
      State: ENABLED
      Targets:
        - Arn: !Ref GaurddutyTopic
          Id: sns
  GaurddutyTopic:
    Type: 'AWS::SNS::Topic'
    Properties:
      TopicName: GuardDuty-Findings
      DisplayName: AWS Guardduty Notification Topic
      Subscription: []
  GuardDutyTopicPolicy:
    Properties:
      PolicyDocument:
        Statement:
          - Action:
              - 'sns:Publish'
            Effect: Allow
            Principal:
              Service: events.amazonaws.com
            Resource:
              - !Ref GaurddutyTopic
      Topics:
        - !Ref GaurddutyTopic
    Type: 'AWS::SNS::TopicPolicy'
  NotifcationSNS:
    Condition: GuarddutySubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref PrimaryEmailGuardduty
        Protocol: email
        TopicArn: !Ref 'GaurddutyTopic'
  ConfigBucket:
    DependsOn: LoggingBucket
    DeletionPolicy: Retain
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Sub "configservice-bucket-${AWS::AccountId}"
      AccessControl: Private
      VersioningConfiguration:
        Status: Enabled    
      BucketEncryption:
        ServerSideEncryptionConfiguration:
        - ServerSideEncryptionByDefault:
            SSEAlgorithm: AES256
      LoggingConfiguration:
        DestinationBucketName: !Ref LoggingBucket
        LogFilePrefix: !Sub "configservice-bucket-${AWS::AccountId}/"
      PublicAccessBlockConfiguration:
        BlockPublicAcls: true
        BlockPublicPolicy: true
        IgnorePublicAcls: true
        RestrictPublicBuckets: true
  ConfigBucketPolicy:
    DependsOn: ConfigBucket
    Type: AWS::S3::BucketPolicy
    DeletionPolicy: Retain
    Properties:
      Bucket: !Ref ConfigBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSConfigBucketPermissionsCheck
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:GetBucketAcl
            Resource:
              - !Sub "arn:aws:s3:::${ConfigBucket}"
          - Sid: AWSConfigBucketDelivery
            Effect: Allow
            Principal:
              Service:
                - config.amazonaws.com
            Action: s3:PutObject
            Resource:
              - !Sub "arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*"
          - Sid: Enforce HTTPS Connections
            Action: s3:*
            Effect: Deny
            Principal: '*'
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"
            Condition:
              Bool:
                aws:SecureTransport: false
          - Sid: Restrict Delete* Actions
            Action: s3:Delete*
            Effect: Deny
            Principal: '*'
            Resource: !Sub "arn:aws:s3:::${ConfigBucket}/*"          
  IAMexecutionrole:
    DependsOn:
    - IAMAdminrole
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetExecutionRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
                AWS:
                - !Join ['', ['arn:aws:iam::', !Ref 'AWS::AccountId',':role/AWSCloudFormationStackSetAdministrationRole']]
            Action:
            - sts:AssumeRole
      Path: /
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/AdministratorAccess  
  IAMAdminrole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSCloudFormationStackSetAdministrationRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
          - Effect: Allow
            Principal: 
              Service:
                - cloudformation.amazonaws.com
            Action:
              - sts:AssumeRole    
      Policies: 
        - 
          PolicyName: 'sts-assume-for-stack-admin'
          PolicyDocument: 
            Version: '2012-10-17'
            Statement: 
              - 
                Effect: "Allow"
                Action:
                  - sts:AssumeRole
                Resource: '!Sub arn:aws:iam::${AWS::AccountId}:role/AWSCloudFormationStackSetExecutionRole'
  ConfigServiceRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: AWSConfigServiceRole
      AssumeRolePolicyDocument:
        Version: 2012-10-17
        Statement:
        - Effect: Allow
          Principal:
            Service:
            - config.amazonaws.com
          Action:
          - sts:AssumeRole
      ManagedPolicyArns:
        - arn:aws:iam::aws:policy/service-role/AWSConfigRole
      Policies:
      - PolicyName: CIS-configservice-policy
        PolicyDocument:
          Version: '2012-10-17'
          Statement:
          - Sid: AWSConfigRole
            Effect: Allow
            Action:
            - config:Put*
            Resource: '*'
          - Sid: AWSCloudTrailConfig
            Effect: Allow
            Action:
            - cloudtrail:List*
            - cloudtrail:Desc*
            - cloudtrail:Look*
            - cloudtrail:Get*
            Resource: '*'
          - Sid: AWSConfigPutObject
            Effect: Allow
            Action: s3:PutObject
            Resource:
            - !Sub 'arn:aws:s3:::${ConfigBucket}/AWSLogs/${AWS::AccountId}/*'
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control
          - Sid: AWSConfigGetObject
            Effect: Allow
            Action: s3:GetBucketAcl
            Resource:
            - !Sub 'arn:aws:s3:::${ConfigBucket}'
  ConfigTopic:
    Type: AWS::SNS::Topic
    Properties:
      TopicName: Config-Service
      DisplayName: AWS Config Notification Topic
  ConfigTopicPolicy:
    Type: AWS::SNS::TopicPolicy
    Properties:
      Topics:
        - !Ref ConfigTopic
      PolicyDocument:
        Statement:
          - Sid: AWSConfigSNSPolicy
            Action:
              - sns:Publish
            Effect: Allow
            Resource: !Ref ConfigTopic
            Principal:
              Service:
                - config.amazonaws.com
  NotifcationSNS:
    Condition: ConfigSubcription
    Type: AWS::SNS::Subscription
    Properties:
        Endpoint: !Ref PrimaryEmailConfigservice
        Protocol: email
        TopicArn: !Ref 'ConfigTopic'
  ConfigRecorder:
    Type: AWS::Config::ConfigurationRecorder
    DependsOn:
    - ConfigServiceRole
    Properties:
      Name: myconfigservice-recorder
      RoleARN: !GetAtt ConfigServiceRole.Arn
      RecordingGroup:
        AllSupported: true
        IncludeGlobalResourceTypes: true
  ConfigDeliveryChannel:
    Type: AWS::Config::DeliveryChannel
    DependsOn:
    - ConfigTopic
    - ConfigBucket
    Properties:
      Name: myconfigservice-deliverychannel
      ConfigSnapshotDeliveryProperties:
        DeliveryFrequency: !Ref DeliveryFrequency
      S3BucketName: !Ref ConfigBucket
      SnsTopicARN: !Ref ConfigTopic
Outputs:
  ForceMFAPolicy:
    Description: 'Force MFA Policy arn'
    Value: !Ref forceiampolicy
  SNSTopicname:
    Description: 'Name of SNS created for Cloudtrail events'
    Value: !GetAtt 'CloudTrailTopic.TopicName'
  ConfigS3BucketName: 
    Description: "S3 Bucket Name for Config Service"
    Value: !Ref ConfigBucket
    Export: 
      Name: !Sub "${AWS::StackName}-BUCKETNAME"
  ConfigIAMRole:
    Description: "IAM Role for configservice"
    Value: !GetAtt ConfigServiceRole.Arn
    Export: 
      Name: !Sub "${AWS::StackName}-CONFIGROLEARN"
  AdminIAMRole:
    Description: "IAM Role for Administrator"
    Value: !Ref IAMAdminrole
    Export: 
      Name: !Sub "${AWS::StackName}-ADMINROLENAME"
  ExecutionIAMRole:
    Description: "IAM Role for Execution"
    Value: !Ref IAMexecutionrole
    Export: 
      Name: !Sub "${AWS::StackName}-EXECUTIONROLENAME"